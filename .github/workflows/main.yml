name: Go
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
env: # Set the secret as an input
  docker_username: ${{ github.actor }}
  docker_password: ${{ secrets.GITHUB_TOKEN }}
  GIT_COMMIT: ${{ github.sha }}
  
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
    - name: Cache
      uses: actions/cache@v1.2.1
      env:
        cache-name: cache-node-modules
      with:
        path: cd caches
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.18
        cache-dependency-path: subdir/go.sum
        
    - name: Build Backend
      run: cd backend && go build
    - name: Build Frontend
      run: cd frontend && go build
  
  Test:
    needs: [Build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.18
        cache-dependency-path: subdir/go.sum
    - name: Test Frontend
      run: cd frontend && go test

  Docker-image:
    name: Build & Upload Docker Image
    runs-on: ubuntu-latest
    needs: [Build]
    permissions:
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Build Docker Frontend
        run: chmod +x ci/build-docker-frontend.sh && ci/build-docker-frontend.sh 
        
      - name: Push Docker Frontend
        run: chmod +x ci/push-docker-frontend.sh && ci/push-docker-frontend.sh
        
      - name: Build Docker Backend
        run: chmod +x ci/build-docker-backend.sh && ci/build-docker-backend.sh
        
      - name: Push Docker Backend
        run: chmod +x ci/push-docker-backend.sh && ci/push-docker-backend.sh

  Kubernetes-deploy:
    name: Deploy with Kubernetes
    runs-on: ubuntu-latest
    needs: [Docker-image]
    steps:
      - run: echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
      - run: kubectl --kubeconfig kubeconfig apply -f .

